{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## T1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>739</td>\n",
       "      <td>162710.0</td>\n",
       "      <td>Macbook Pro Laptop</td>\n",
       "      <td>1</td>\n",
       "      <td>1700.00</td>\n",
       "      <td>12/25/20 9:51</td>\n",
       "      <td>Ha Giang</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>740</td>\n",
       "      <td>162711.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>12/27/20 17:25</td>\n",
       "      <td>Ha Nam</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>741</td>\n",
       "      <td>162712.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>12/24/20 18:51</td>\n",
       "      <td>Ha Noi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>742</td>\n",
       "      <td>162713.0</td>\n",
       "      <td>AA Batteries (4-pack)</td>\n",
       "      <td>1</td>\n",
       "      <td>3.84</td>\n",
       "      <td>12/17/20 22:52</td>\n",
       "      <td>Ha Tinh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>743</td>\n",
       "      <td>162714.0</td>\n",
       "      <td>34in Ultrawide Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>379.99</td>\n",
       "      <td>12/08/20 18:22</td>\n",
       "      <td>Hai Duong</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>744 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0    162009.0                    iPhone                 1      700.00   \n",
       "1    162009.0  Lightning Charging Cable                 1       14.95   \n",
       "2    162009.0          Wired Headphones                 2       11.99   \n",
       "3    162010.0          27in FHD Monitor                 1      149.99   \n",
       "4    162011.0          Wired Headphones                 1       11.99   \n",
       "..        ...                       ...               ...         ...   \n",
       "739  162710.0        Macbook Pro Laptop                 1     1700.00   \n",
       "740  162711.0  Lightning Charging Cable                 1       14.95   \n",
       "741  162712.0          27in FHD Monitor                 1      149.99   \n",
       "742  162713.0     AA Batteries (4-pack)                 1        3.84   \n",
       "743  162714.0    34in Ultrawide Monitor                 1      379.99   \n",
       "\n",
       "         Order Date       City  \n",
       "0    01/22/20 21:25   An Giang  \n",
       "1    01/28/20 14:15   Vung Tau  \n",
       "2    01/17/20 13:33  Bac Giang  \n",
       "3    01/05/20 20:33    Bac Kan  \n",
       "4    01/25/20 11:59   Bac Lieu  \n",
       "..              ...        ...  \n",
       "739   12/25/20 9:51   Ha Giang  \n",
       "740  12/27/20 17:25     Ha Nam  \n",
       "741  12/24/20 18:51     Ha Noi  \n",
       "742  12/17/20 22:52    Ha Tinh  \n",
       "743  12/08/20 18:22  Hai Duong  \n",
       "\n",
       "[744 rows x 6 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#load dữ liệu\n",
    "path='SALE2020.csv'\n",
    "dataframe=pd.read_csv(path)\n",
    "dataframe #truyền theo số dòng muốn xem thì dataframe.head(sodong) sẽ in ra bao gồm cả dòng tiêu đề, nếu k tryền tham số sẽ in ra mặc định 5 dòng\n",
    "#chỉ truyền được tệp tin khi nó chứa cùng 1 thư mục\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1      700.00   \n",
       "1  162009.0  Lightning Charging Cable                 1       14.95   \n",
       "2  162009.0          Wired Headphones                 2       11.99   \n",
       "3  162010.0          27in FHD Monitor                 1      149.99   \n",
       "4  162011.0          Wired Headphones                 1       11.99   \n",
       "\n",
       "       Order Date       City Month  \n",
       "0  01/22/20 21:25   An Giang        \n",
       "1  01/28/20 14:15   Vung Tau        \n",
       "2  01/17/20 13:33  Bac Giang        \n",
       "3  01/05/20 20:33    Bac Kan        \n",
       "4  01/25/20 11:59   Bac Lieu        "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Thêm cột tháng và lấy tháng ở côt order date\n",
    "df=dataframe\n",
    "df['Month']='' #thêm cột\n",
    "df.head() #cho ra mặc định 5 dòng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      01/22/20 21:25\n",
       "1      01/28/20 14:15\n",
       "2      01/17/20 13:33\n",
       "3      01/05/20 20:33\n",
       "4      01/25/20 11:59\n",
       "            ...      \n",
       "739     12/25/20 9:51\n",
       "740    12/27/20 17:25\n",
       "741    12/24/20 18:51\n",
       "742    12/17/20 22:52\n",
       "743    12/08/20 18:22\n",
       "Name: Order Date, Length: 744, dtype: object"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Order Date'] # truy cập cột"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      01\n",
       "1      01\n",
       "2      01\n",
       "3      01\n",
       "4      01\n",
       "       ..\n",
       "739    12\n",
       "740    12\n",
       "741    12\n",
       "742    12\n",
       "743    12\n",
       "Name: Order Date, Length: 744, dtype: object"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Order Date'].str[0:2]#sau đó gán vào cột month\n",
    "#hoặc df['Order Date'].str.slice(start=0, stop=2, step=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>739</td>\n",
       "      <td>162710.0</td>\n",
       "      <td>Macbook Pro Laptop</td>\n",
       "      <td>1</td>\n",
       "      <td>1700.00</td>\n",
       "      <td>12/25/20 9:51</td>\n",
       "      <td>Ha Giang</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>740</td>\n",
       "      <td>162711.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>12/27/20 17:25</td>\n",
       "      <td>Ha Nam</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>741</td>\n",
       "      <td>162712.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>12/24/20 18:51</td>\n",
       "      <td>Ha Noi</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>742</td>\n",
       "      <td>162713.0</td>\n",
       "      <td>AA Batteries (4-pack)</td>\n",
       "      <td>1</td>\n",
       "      <td>3.84</td>\n",
       "      <td>12/17/20 22:52</td>\n",
       "      <td>Ha Tinh</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>743</td>\n",
       "      <td>162714.0</td>\n",
       "      <td>34in Ultrawide Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>379.99</td>\n",
       "      <td>12/08/20 18:22</td>\n",
       "      <td>Hai Duong</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>744 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0    162009.0                    iPhone                 1      700.00   \n",
       "1    162009.0  Lightning Charging Cable                 1       14.95   \n",
       "2    162009.0          Wired Headphones                 2       11.99   \n",
       "3    162010.0          27in FHD Monitor                 1      149.99   \n",
       "4    162011.0          Wired Headphones                 1       11.99   \n",
       "..        ...                       ...               ...         ...   \n",
       "739  162710.0        Macbook Pro Laptop                 1     1700.00   \n",
       "740  162711.0  Lightning Charging Cable                 1       14.95   \n",
       "741  162712.0          27in FHD Monitor                 1      149.99   \n",
       "742  162713.0     AA Batteries (4-pack)                 1        3.84   \n",
       "743  162714.0    34in Ultrawide Monitor                 1      379.99   \n",
       "\n",
       "         Order Date       City Month  \n",
       "0    01/22/20 21:25   An Giang    01  \n",
       "1    01/28/20 14:15   Vung Tau    01  \n",
       "2    01/17/20 13:33  Bac Giang    01  \n",
       "3    01/05/20 20:33    Bac Kan    01  \n",
       "4    01/25/20 11:59   Bac Lieu    01  \n",
       "..              ...        ...   ...  \n",
       "739   12/25/20 9:51   Ha Giang    12  \n",
       "740  12/27/20 17:25     Ha Nam    12  \n",
       "741  12/24/20 18:51     Ha Noi    12  \n",
       "742  12/17/20 22:52    Ha Tinh    12  \n",
       "743  12/08/20 18:22  Hai Duong    12  \n",
       "\n",
       "[744 rows x 7 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Month']=df['Order Date'].str[0:2]\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# T2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int64\n",
      "float64\n"
     ]
    }
   ],
   "source": [
    "#kiểm tra kiểu dữ liệu ở 2 cột\n",
    "print(df['Quantity Ordered'].dtypes)\n",
    "print(df['Price Each'].dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Truyền kiểu dữ liệu về kiểu dữ liệu integer và float\n",
    "df['Quantity Ordered'] = pd.to_numeric(df['Quantity Ordered'], downcast='integer') #downcast là chỉ rõ kiểu dữ liệu mình muốn chuyển thành\n",
    "df['Price Each'] = pd.to_numeric(df['Price Each'], downcast='float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Sale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>700.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14.950000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>23.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "      <td>149.990005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "      <td>11.990000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1  700.000000   \n",
       "1  162009.0  Lightning Charging Cable                 1   14.950000   \n",
       "2  162009.0          Wired Headphones                 2   11.990000   \n",
       "3  162010.0          27in FHD Monitor                 1  149.990005   \n",
       "4  162011.0          Wired Headphones                 1   11.990000   \n",
       "\n",
       "       Order Date       City Month        Sale  \n",
       "0  01/22/20 21:25   An Giang    01  700.000000  \n",
       "1  01/28/20 14:15   Vung Tau    01   14.950000  \n",
       "2  01/17/20 13:33  Bac Giang    01   23.980000  \n",
       "3  01/05/20 20:33    Bac Kan    01  149.990005  \n",
       "4  01/25/20 11:59   Bac Lieu    01   11.990000  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#tạo một cột sale và tính giá trị cột sale\n",
    "df['Sale']=df['Quantity Ordered']*df['Price Each']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       700.000000\n",
       "1        14.950000\n",
       "2        23.980000\n",
       "3       149.990005\n",
       "4        11.990000\n",
       "          ...     \n",
       "739    1700.000000\n",
       "740      14.950000\n",
       "741     149.990005\n",
       "742       3.840000\n",
       "743     379.989990\n",
       "Length: 744, dtype: float32"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Quantity Ordered']*df['Price Each']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1  700.000000   \n",
       "1  162009.0  Lightning Charging Cable                 1   14.950000   \n",
       "2  162009.0          Wired Headphones                 2   11.990000   \n",
       "3  162010.0          27in FHD Monitor                 1  149.990005   \n",
       "4  162011.0          Wired Headphones                 1   11.990000   \n",
       "\n",
       "         Sale      Order Date       City Month  \n",
       "0  700.000000  01/22/20 21:25   An Giang    01  \n",
       "1   14.950000  01/28/20 14:15   Vung Tau    01  \n",
       "2   23.980000  01/17/20 13:33  Bac Giang    01  \n",
       "3  149.990005  01/05/20 20:33    Bac Kan    01  \n",
       "4   11.990000  01/25/20 11:59   Bac Lieu    01  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#chuyển vị trí cột sale vào trong cột order date\n",
    "\n",
    "moving_column = df.pop('Sale') #dùng pop nghĩa là đang cắt cột đó ra khỏi dataframe\n",
    "df.insert(4,'Sale', moving_column) # truyền tới vị trí cột số 4\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "01    10157.879883\n",
       "02    13597.650391\n",
       "03    11216.509766\n",
       "04    10252.150391\n",
       "05    10138.000000\n",
       "06    12989.700195\n",
       "07     9920.110352\n",
       "08    15701.330078\n",
       "09    12253.179688\n",
       "10     9238.530273\n",
       "11    10209.530273\n",
       "12    12633.280273\n",
       "Name: Sale, dtype: float32"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lọc dữ liệu theo từng tháng theo hàm sum\n",
    "df.groupby('Month').sum()['Sale']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15701.330078125"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#THÁNG có doanh thu cao nhất\n",
    "sales_value=df.groupby('Month').sum()['Sale']\n",
    "sales_value.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Months=range(1,13)\n",
    "plt.bar(x=Months, height=sales_value) #truyền vào thông số đầu tiên là giá trị trục X tương ứng giá trị 12 tháng, tham số tiếp theo là trục y chính là độ cao là doanh thu từng tháng\n",
    "plt.xticks(Months) # truyền vào thông số muốn thể hiện\n",
    "plt.xlabel('Months') # đặt tên trục\n",
    "plt.ylabel('Sala in USD') # đặt tên trục\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1  700.000000   \n",
       "1  162009.0  Lightning Charging Cable                 1   14.950000   \n",
       "2  162009.0          Wired Headphones                 2   11.990000   \n",
       "3  162010.0          27in FHD Monitor                 1  149.990005   \n",
       "4  162011.0          Wired Headphones                 1   11.990000   \n",
       "\n",
       "         Sale      Order Date       City Month  \n",
       "0  700.000000  01/22/20 21:25   An Giang    01  \n",
       "1   14.950000  01/28/20 14:15   Vung Tau    01  \n",
       "2   23.980000  01/17/20 13:33  Bac Giang    01  \n",
       "3  149.990005  01/05/20 20:33    Bac Kan    01  \n",
       "4   11.990000  01/25/20 11:59   Bac Lieu    01  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City\n",
       " Vung Tau      1304.939941\n",
       "An Giang       3217.850098\n",
       "Bac Giang      2372.709961\n",
       "Bac Kan        3414.669922\n",
       "Bac Lieu        223.069992\n",
       "                  ...     \n",
       "Tuyen Quang    2417.010010\n",
       "Vinh Long       777.380005\n",
       "Vinh Phuc      1167.510010\n",
       "Vung Tau       2089.939941\n",
       "Yen Bai         248.190002\n",
       "Name: Sale, Length: 64, dtype: float32"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#doanh thu của các THÀNH PHỐ\n",
    "df.groupby('City').sum()['Sale']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5870.68017578125"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#thành phố có doanh thu cao nhất\n",
    "sale_value_City=df.groupby('City').sum()['Sale']\n",
    "sale_value_City.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5870.68017578125"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('City').sum()['Sale']\n",
    "sale_value_City=df.groupby('City').sum()['Sale']\n",
    "sale_value_City.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "cities=df['City'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(x=cities, height=sale_value_City, color='green')\n",
    "plt.xticks(cities, rotation=90, size=5) # chỉnh tên thành phố thẳng 90 độ\n",
    "plt.xlabel('Cities')\n",
    "plt.ylabel('Sale in USD')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Doanh nghiệp cần chiếu quảng cáo vào khung thời gian nào để tăng khả năng mua hàng của khách hàng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>01/22/20 21:25</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>01/28/20 14:15</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>01/17/20 13:33</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>01/05/20 20:33</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>01/25/20 11:59</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1  700.000000   \n",
       "1  162009.0  Lightning Charging Cable                 1   14.950000   \n",
       "2  162009.0          Wired Headphones                 2   11.990000   \n",
       "3  162010.0          27in FHD Monitor                 1  149.990005   \n",
       "4  162011.0          Wired Headphones                 1   11.990000   \n",
       "\n",
       "         Sale      Order Date       City Month  \n",
       "0  700.000000  01/22/20 21:25   An Giang    01  \n",
       "1   14.950000  01/28/20 14:15   Vung Tau    01  \n",
       "2   23.980000  01/17/20 13:33  Bac Giang    01  \n",
       "3  149.990005  01/05/20 20:33    Bac Kan    01  \n",
       "4   11.990000  01/25/20 11:59   Bac Lieu    01  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Order Date']=pd.to_datetime(df['Order Date'])# truyền vào thông số dữ liệu  chuyển đổi sang datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "print(df['Order Date'].dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# chiết xuất dữ liệu h và phút\n",
    "sample_date='01/22/20 21:25'\n",
    "sample_date_to_datetime=pd.to_datetime(sample_date)\n",
    "sample_date_to_datetime.minute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      21\n",
       "1      14\n",
       "2      13\n",
       "3      20\n",
       "4      11\n",
       "       ..\n",
       "739     9\n",
       "740    17\n",
       "741    18\n",
       "742    22\n",
       "743    18\n",
       "Name: Order Date, Length: 744, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tìm ra h mua sản phẩm\n",
    "df['Order Date'].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>2020-01-22 21:25:00</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>2020-01-28 14:15:00</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>2020-01-17 13:33:00</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>2020-01-05 20:33:00</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>2020-01-25 11:59:00</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>739</td>\n",
       "      <td>162710.0</td>\n",
       "      <td>Macbook Pro Laptop</td>\n",
       "      <td>1</td>\n",
       "      <td>1700.000000</td>\n",
       "      <td>1700.000000</td>\n",
       "      <td>2020-12-25 09:51:00</td>\n",
       "      <td>Ha Giang</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>740</td>\n",
       "      <td>162711.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>2020-12-27 17:25:00</td>\n",
       "      <td>Ha Nam</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>741</td>\n",
       "      <td>162712.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>2020-12-24 18:51:00</td>\n",
       "      <td>Ha Noi</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>742</td>\n",
       "      <td>162713.0</td>\n",
       "      <td>AA Batteries (4-pack)</td>\n",
       "      <td>1</td>\n",
       "      <td>3.840000</td>\n",
       "      <td>3.840000</td>\n",
       "      <td>2020-12-17 22:52:00</td>\n",
       "      <td>Ha Tinh</td>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>743</td>\n",
       "      <td>162714.0</td>\n",
       "      <td>34in Ultrawide Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>379.989990</td>\n",
       "      <td>379.989990</td>\n",
       "      <td>2020-12-08 18:22:00</td>\n",
       "      <td>Hai Duong</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>744 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Order ID                   Product  Quantity Ordered   Price Each  \\\n",
       "0    162009.0                    iPhone                 1   700.000000   \n",
       "1    162009.0  Lightning Charging Cable                 1    14.950000   \n",
       "2    162009.0          Wired Headphones                 2    11.990000   \n",
       "3    162010.0          27in FHD Monitor                 1   149.990005   \n",
       "4    162011.0          Wired Headphones                 1    11.990000   \n",
       "..        ...                       ...               ...          ...   \n",
       "739  162710.0        Macbook Pro Laptop                 1  1700.000000   \n",
       "740  162711.0  Lightning Charging Cable                 1    14.950000   \n",
       "741  162712.0          27in FHD Monitor                 1   149.990005   \n",
       "742  162713.0     AA Batteries (4-pack)                 1     3.840000   \n",
       "743  162714.0    34in Ultrawide Monitor                 1   379.989990   \n",
       "\n",
       "            Sale          Order Date       City Month  Hours  \n",
       "0     700.000000 2020-01-22 21:25:00   An Giang    01     21  \n",
       "1      14.950000 2020-01-28 14:15:00   Vung Tau    01     14  \n",
       "2      23.980000 2020-01-17 13:33:00  Bac Giang    01     13  \n",
       "3     149.990005 2020-01-05 20:33:00    Bac Kan    01     20  \n",
       "4      11.990000 2020-01-25 11:59:00   Bac Lieu    01     11  \n",
       "..           ...                 ...        ...   ...    ...  \n",
       "739  1700.000000 2020-12-25 09:51:00   Ha Giang    12      9  \n",
       "740    14.950000 2020-12-27 17:25:00     Ha Nam    12     17  \n",
       "741   149.990005 2020-12-24 18:51:00     Ha Noi    12     18  \n",
       "742     3.840000 2020-12-17 22:52:00    Ha Tinh    12     22  \n",
       "743   379.989990 2020-12-08 18:22:00  Hai Duong    12     18  \n",
       "\n",
       "[744 rows x 9 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Hours']=df['Order Date'].dt.hour # gán giá trị cho cột mới tạo là hours\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# giờ trên tổng doanh thu đạt được từ khung giờ đó\n",
    "# ví dụ lúc 7h có 5 đơn hàng giá 1$, lúc 8h có 1 đơn giá 7$ nghĩa là doanh thu lúc 8h sẽ lớn nhất\n",
    "df['Hours']=df['Order Date'].dt.hour\n",
    "sales_value_hours=df.groupby('Hours').sum()['Sale'] # sum để tính doanh thu\n",
    "hours=[hour for hour, sale in sales_value_hours.items()]\n",
    "\n",
    "plt.plot(hours, sales_value_hours)\n",
    "plt.grid() # thêm lưới\n",
    "plt.xticks(hours, rotation=90, size=8)\n",
    "plt.xlabel('Hours')\n",
    "plt.ylabel('Sales in USD')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# giờ trên tổng đơn hàng được đặt trong khung giờ đó\n",
    "# ví dụ lúc 7h có 5 đơn hàng giá 1$, lúc 8h có 1 đơn giá 7$ nghĩa là đơn hàng lúc 7h sẽ nhiều nhất\n",
    "df['Hours']=df['Order Date'].dt.hour\n",
    "sales_value_hours=df.groupby('Hours').count()['Sale'] # count để tính số đơn\n",
    "hours=[hour for hour, sale in sales_value_hours.items()]\n",
    "\n",
    "plt.plot(hours, sales_value_hours)\n",
    "plt.grid()\n",
    "plt.xticks(hours, rotation=90, size=8)\n",
    "plt.xlabel('Hours')\n",
    "plt.ylabel('Sales in USD')\n",
    "plt.show()\n",
    "# kết luận:khung giờ từ 11-12h trưa, tầm giờ nghỉ trưa hoặc khung giờ 19h tối sau ki di làm về, quảng cáo từ 30- 60 là ok, để quảng cáo có hiệu quả thì tách ra ra từng thành phố sẽ có khung h khác nữa nhất"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# những sản phẩm nào thường được bán cùng nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>700.00</td>\n",
       "      <td>2020-01-22 21:25:00</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>14.95</td>\n",
       "      <td>2020-01-28 14:15:00</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>23.98</td>\n",
       "      <td>2020-01-17 13:33:00</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-03 09:46:00</td>\n",
       "      <td>Khanh Hua</td>\n",
       "      <td>01</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-01 16:52:00</td>\n",
       "      <td>Kien Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Order ID                   Product  Quantity Ordered  Price Each    Sale  \\\n",
       "0   162009.0                    iPhone                 1      700.00  700.00   \n",
       "1   162009.0  Lightning Charging Cable                 1       14.95   14.95   \n",
       "2   162009.0          Wired Headphones                 2       11.99   23.98   \n",
       "30  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "31  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "\n",
       "            Order Date        City Month  Hours  \n",
       "0  2020-01-22 21:25:00    An Giang    01     21  \n",
       "1  2020-01-28 14:15:00    Vung Tau    01     14  \n",
       "2  2020-01-17 13:33:00   Bac Giang    01     13  \n",
       "30 2020-01-03 09:46:00   Khanh Hua    01      9  \n",
       "31 2020-01-01 16:52:00  Kien Giang    01     16  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# những dấu hiệu đơn hàng được mua cùng nhau: có thể cùng thời gian đặt hàng và giao hàng đến cùng địa điểm, có thể là cùng order id là cùng 1 đơn hàng\n",
    "df_dup =df[df['Order ID'].duplicated(keep=False)] # chỉ ra các hàng bị lặp lại\n",
    "df_dup.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>700.00</td>\n",
       "      <td>2020-01-22 21:25:00</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>14.95</td>\n",
       "      <td>2020-01-28 14:15:00</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>23.98</td>\n",
       "      <td>2020-01-17 13:33:00</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-03 09:46:00</td>\n",
       "      <td>Khanh Hua</td>\n",
       "      <td>01</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-01 16:52:00</td>\n",
       "      <td>Kien Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Order ID                   Product  Quantity Ordered  Price Each    Sale  \\\n",
       "0   162009.0                    iPhone                 1      700.00  700.00   \n",
       "1   162009.0  Lightning Charging Cable                 1       14.95   14.95   \n",
       "2   162009.0          Wired Headphones                 2       11.99   23.98   \n",
       "30  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "31  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "\n",
       "            Order Date        City Month  Hours  \n",
       "0  2020-01-22 21:25:00    An Giang    01     21  \n",
       "1  2020-01-28 14:15:00    Vung Tau    01     14  \n",
       "2  2020-01-17 13:33:00   Bac Giang    01     13  \n",
       "30 2020-01-03 09:46:00   Khanh Hua    01      9  \n",
       "31 2020-01-01 16:52:00  Kien Giang    01     16  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dup = df[df['Order ID'].duplicated(keep=False)] \n",
    "groupProduct = lambda product: ', '.join(product) #thêm dấu phẩy ngăn cách các sản phẩm\n",
    "df_dup.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HP\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hours</th>\n",
       "      <th>All Products</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.00</td>\n",
       "      <td>700.00</td>\n",
       "      <td>2020-01-22 21:25:00</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "      <td>iPhone, Lightning Charging Cable, Wired Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>14.95</td>\n",
       "      <td>2020-01-28 14:15:00</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14</td>\n",
       "      <td>iPhone, Lightning Charging Cable, Wired Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>23.98</td>\n",
       "      <td>2020-01-17 13:33:00</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>13</td>\n",
       "      <td>iPhone, Lightning Charging Cable, Wired Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-03 09:46:00</td>\n",
       "      <td>Khanh Hua</td>\n",
       "      <td>01</td>\n",
       "      <td>9</td>\n",
       "      <td>Apple Airpods Headphones, Apple Airpods Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>150.00</td>\n",
       "      <td>150.00</td>\n",
       "      <td>2020-01-01 16:52:00</td>\n",
       "      <td>Kien Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>16</td>\n",
       "      <td>Apple Airpods Headphones, Apple Airpods Headph...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Order ID                   Product  Quantity Ordered  Price Each    Sale  \\\n",
       "0   162009.0                    iPhone                 1      700.00  700.00   \n",
       "1   162009.0  Lightning Charging Cable                 1       14.95   14.95   \n",
       "2   162009.0          Wired Headphones                 2       11.99   23.98   \n",
       "30  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "31  162037.0  Apple Airpods Headphones                 1      150.00  150.00   \n",
       "\n",
       "            Order Date        City Month  Hours  \\\n",
       "0  2020-01-22 21:25:00    An Giang    01     21   \n",
       "1  2020-01-28 14:15:00    Vung Tau    01     14   \n",
       "2  2020-01-17 13:33:00   Bac Giang    01     13   \n",
       "30 2020-01-03 09:46:00   Khanh Hua    01      9   \n",
       "31 2020-01-01 16:52:00  Kien Giang    01     16   \n",
       "\n",
       "                                         All Products  \n",
       "0   iPhone, Lightning Charging Cable, Wired Headph...  \n",
       "1   iPhone, Lightning Charging Cable, Wired Headph...  \n",
       "2   iPhone, Lightning Charging Cable, Wired Headph...  \n",
       "30  Apple Airpods Headphones, Apple Airpods Headph...  \n",
       "31  Apple Airpods Headphones, Apple Airpods Headph...  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dup['All Products'] = df_dup.groupby('Order ID')['Product'].transform(groupProduct)\n",
    "df_dup.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HP\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Apple Airpods Headphones, AAA Batteries (4-pack)      2\n",
       "AA Batteries (4-pack), 27in FHD Monitor               2\n",
       "AAA Batteries (4-pack), USB-C Charging Cable          2\n",
       "20in Monitor, Lightning Charging Cable                1\n",
       "Apple Airpods Headphones, Flatscreen TV               1\n",
       "Lightning Charging Cable, USB-C Charging Cable        1\n",
       "AA Batteries (4-pack), ThinkPad Laptop                1\n",
       "Wired Headphones, Wired Headphones                    1\n",
       "Macbook Pro Laptop, AA Batteries (4-pack)             1\n",
       "AAA Batteries (4-pack), Bose SoundSport Headphones    1\n",
       "Name: All Products, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dup['All Products'] = df_dup.groupby('Order ID')['Product'].transform(groupProduct)\n",
    "df_dup = df_dup[['Order ID', 'All Products']].drop_duplicates()\n",
    "df_dup['All Products'].value_counts().head(10)\n",
    "# 10 cặp sản phẩm được bán cùng nhau"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dup = df_dup[['Order ID', 'All Products']].drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>All Products</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone, Lightning Charging Cable, Wired Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>162037.0</td>\n",
       "      <td>Apple Airpods Headphones, Apple Airpods Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60</td>\n",
       "      <td>162066.0</td>\n",
       "      <td>AAA Batteries (4-pack), USB-C Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>162071.0</td>\n",
       "      <td>AA Batteries (4-pack), Lightning Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>162082.0</td>\n",
       "      <td>Macbook Pro Laptop, iPhone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>84</td>\n",
       "      <td>162087.0</td>\n",
       "      <td>LG Dryer, Wired Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90</td>\n",
       "      <td>162092.0</td>\n",
       "      <td>AA Batteries (4-pack), ThinkPad Laptop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>141</td>\n",
       "      <td>162142.0</td>\n",
       "      <td>27in 4K Gaming Monitor, AAA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>161</td>\n",
       "      <td>162161.0</td>\n",
       "      <td>AA Batteries (4-pack), 27in FHD Monitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>188</td>\n",
       "      <td>162187.0</td>\n",
       "      <td>Wired Headphones, Wired Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>191</td>\n",
       "      <td>162189.0</td>\n",
       "      <td>Bose SoundSport Headphones, USB-C Charging Cab...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>219</td>\n",
       "      <td>162215.0</td>\n",
       "      <td>20in Monitor, Lightning Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>249</td>\n",
       "      <td>162244.0</td>\n",
       "      <td>AA Batteries (4-pack), 27in FHD Monitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>303</td>\n",
       "      <td>162297.0</td>\n",
       "      <td>27in FHD Monitor, Google Phone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>336</td>\n",
       "      <td>162329.0</td>\n",
       "      <td>Google Phone, Apple Airpods Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>340</td>\n",
       "      <td>162332.0</td>\n",
       "      <td>USB-C Charging Cable, Wired Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>356</td>\n",
       "      <td>162347.0</td>\n",
       "      <td>Lightning Charging Cable, USB-C Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>362</td>\n",
       "      <td>162352.0</td>\n",
       "      <td>Apple Airpods Headphones, AAA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>372</td>\n",
       "      <td>162361.0</td>\n",
       "      <td>Apple Airpods Headphones, Flatscreen TV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>376</td>\n",
       "      <td>162364.0</td>\n",
       "      <td>AAA Batteries (4-pack), Bose SoundSport Headph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>381</td>\n",
       "      <td>162368.0</td>\n",
       "      <td>Lightning Charging Cable, AA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>390</td>\n",
       "      <td>162376.0</td>\n",
       "      <td>Google Phone, Vareebadd Phone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>396</td>\n",
       "      <td>162381.0</td>\n",
       "      <td>AA Batteries (4-pack), AAA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>407</td>\n",
       "      <td>162391.0</td>\n",
       "      <td>Wired Headphones, 20in Monitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>425</td>\n",
       "      <td>162408.0</td>\n",
       "      <td>USB-C Charging Cable, Macbook Pro Laptop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>427</td>\n",
       "      <td>162409.0</td>\n",
       "      <td>AAA Batteries (4-pack), AA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>483</td>\n",
       "      <td>162463.0</td>\n",
       "      <td>Apple Airpods Headphones, AAA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>507</td>\n",
       "      <td>162486.0</td>\n",
       "      <td>AAA Batteries (4-pack), USB-C Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>512</td>\n",
       "      <td>162490.0</td>\n",
       "      <td>Google Phone, USB-C Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>531</td>\n",
       "      <td>162508.0</td>\n",
       "      <td>34in Ultrawide Monitor, USB-C Charging Cable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>578</td>\n",
       "      <td>162554.0</td>\n",
       "      <td>Lightning Charging Cable, 27in 4K Gaming Monitor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>582</td>\n",
       "      <td>162557.0</td>\n",
       "      <td>Wired Headphones, Apple Airpods Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>638</td>\n",
       "      <td>162612.0</td>\n",
       "      <td>Macbook Pro Laptop, AA Batteries (4-pack)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>650</td>\n",
       "      <td>162623.0</td>\n",
       "      <td>27in FHD Monitor, Bose SoundSport Headphones</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>689</td>\n",
       "      <td>162661.0</td>\n",
       "      <td>USB-C Charging Cable, Bose SoundSport Headphones</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Order ID                                       All Products\n",
       "0    162009.0  iPhone, Lightning Charging Cable, Wired Headph...\n",
       "30   162037.0  Apple Airpods Headphones, Apple Airpods Headph...\n",
       "60   162066.0       AAA Batteries (4-pack), USB-C Charging Cable\n",
       "66   162071.0    AA Batteries (4-pack), Lightning Charging Cable\n",
       "78   162082.0                         Macbook Pro Laptop, iPhone\n",
       "84   162087.0                         LG Dryer, Wired Headphones\n",
       "90   162092.0             AA Batteries (4-pack), ThinkPad Laptop\n",
       "141  162142.0     27in 4K Gaming Monitor, AAA Batteries (4-pack)\n",
       "161  162161.0            AA Batteries (4-pack), 27in FHD Monitor\n",
       "188  162187.0                 Wired Headphones, Wired Headphones\n",
       "191  162189.0  Bose SoundSport Headphones, USB-C Charging Cab...\n",
       "219  162215.0             20in Monitor, Lightning Charging Cable\n",
       "249  162244.0            AA Batteries (4-pack), 27in FHD Monitor\n",
       "303  162297.0                     27in FHD Monitor, Google Phone\n",
       "336  162329.0             Google Phone, Apple Airpods Headphones\n",
       "340  162332.0             USB-C Charging Cable, Wired Headphones\n",
       "356  162347.0     Lightning Charging Cable, USB-C Charging Cable\n",
       "362  162352.0   Apple Airpods Headphones, AAA Batteries (4-pack)\n",
       "372  162361.0            Apple Airpods Headphones, Flatscreen TV\n",
       "376  162364.0  AAA Batteries (4-pack), Bose SoundSport Headph...\n",
       "381  162368.0    Lightning Charging Cable, AA Batteries (4-pack)\n",
       "390  162376.0                      Google Phone, Vareebadd Phone\n",
       "396  162381.0      AA Batteries (4-pack), AAA Batteries (4-pack)\n",
       "407  162391.0                     Wired Headphones, 20in Monitor\n",
       "425  162408.0           USB-C Charging Cable, Macbook Pro Laptop\n",
       "427  162409.0      AAA Batteries (4-pack), AA Batteries (4-pack)\n",
       "483  162463.0   Apple Airpods Headphones, AAA Batteries (4-pack)\n",
       "507  162486.0       AAA Batteries (4-pack), USB-C Charging Cable\n",
       "512  162490.0                 Google Phone, USB-C Charging Cable\n",
       "531  162508.0       34in Ultrawide Monitor, USB-C Charging Cable\n",
       "578  162554.0   Lightning Charging Cable, 27in 4K Gaming Monitor\n",
       "582  162557.0         Wired Headphones, Apple Airpods Headphones\n",
       "638  162612.0          Macbook Pro Laptop, AA Batteries (4-pack)\n",
       "650  162623.0       27in FHD Monitor, Bose SoundSport Headphones\n",
       "689  162661.0   USB-C Charging Cable, Bose SoundSport Headphones"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Apple Airpods Headphones, AAA Batteries (4-pack)      2\n",
       "AA Batteries (4-pack), 27in FHD Monitor               2\n",
       "AAA Batteries (4-pack), USB-C Charging Cable          2\n",
       "20in Monitor, Lightning Charging Cable                1\n",
       "Apple Airpods Headphones, Flatscreen TV               1\n",
       "Lightning Charging Cable, USB-C Charging Cable        1\n",
       "AA Batteries (4-pack), ThinkPad Laptop                1\n",
       "Wired Headphones, Wired Headphones                    1\n",
       "Macbook Pro Laptop, AA Batteries (4-pack)             1\n",
       "AAA Batteries (4-pack), Bose SoundSport Headphones    1\n",
       "Name: All Products, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dup['All Products'].value_counts().head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Sale</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>City</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>2020-01-22 21:25:00</td>\n",
       "      <td>An Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>14.950000</td>\n",
       "      <td>2020-01-28 14:15:00</td>\n",
       "      <td>Vung Tau</td>\n",
       "      <td>01</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>162009.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>2020-01-17 13:33:00</td>\n",
       "      <td>Bac Giang</td>\n",
       "      <td>01</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>162010.0</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>149.990005</td>\n",
       "      <td>2020-01-05 20:33:00</td>\n",
       "      <td>Bac Kan</td>\n",
       "      <td>01</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>162011.0</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>11.990000</td>\n",
       "      <td>2020-01-25 11:59:00</td>\n",
       "      <td>Bac Lieu</td>\n",
       "      <td>01</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order ID                   Product  Quantity Ordered  Price Each  \\\n",
       "0  162009.0                    iPhone                 1  700.000000   \n",
       "1  162009.0  Lightning Charging Cable                 1   14.950000   \n",
       "2  162009.0          Wired Headphones                 2   11.990000   \n",
       "3  162010.0          27in FHD Monitor                 1  149.990005   \n",
       "4  162011.0          Wired Headphones                 1   11.990000   \n",
       "\n",
       "         Sale          Order Date       City Month  Hours  \n",
       "0  700.000000 2020-01-22 21:25:00   An Giang    01     21  \n",
       "1   14.950000 2020-01-28 14:15:00   Vung Tau    01     14  \n",
       "2   23.980000 2020-01-17 13:33:00  Bac Giang    01     13  \n",
       "3  149.990005 2020-01-05 20:33:00    Bac Kan    01     20  \n",
       "4   11.990000 2020-01-25 11:59:00   Bac Lieu    01     11  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sản phẩm nào được bán nhiều nhất"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product\n",
       "20in Monitor                   15.0\n",
       "27in 4K Gaming Monitor         20.0\n",
       "27in FHD Monitor               36.0\n",
       "34in Ultrawide Monitor         18.0\n",
       "AA Batteries (4-pack)         120.0\n",
       "AAA Batteries (4-pack)        140.0\n",
       "Apple Airpods Headphones       78.0\n",
       "Bose SoundSport Headphones     51.0\n",
       "Flatscreen TV                  12.0\n",
       "Google Phone                   24.0\n",
       "LG Dryer                        5.0\n",
       "LG Washing Machine              4.0\n",
       "Lightning Charging Cable       78.0\n",
       "Macbook Pro Laptop             20.0\n",
       "ThinkPad Laptop                15.0\n",
       "USB-C Charging Cable          105.0\n",
       "Vareebadd Phone                 7.0\n",
       "Wired Headphones               85.0\n",
       "iPhone                         29.0\n",
       "Name: Quantity Ordered, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_products = df.groupby('Product').sum()['Quantity Ordered']\n",
    "all_products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product\n",
       "20in Monitor                   109.989998\n",
       "27in 4K Gaming Monitor         389.989990\n",
       "27in FHD Monitor               149.990005\n",
       "34in Ultrawide Monitor         379.989990\n",
       "AA Batteries (4-pack)            3.840000\n",
       "AAA Batteries (4-pack)           2.990000\n",
       "Apple Airpods Headphones       150.000000\n",
       "Bose SoundSport Headphones      99.989998\n",
       "Flatscreen TV                  300.000000\n",
       "Google Phone                   600.000000\n",
       "LG Dryer                       600.000000\n",
       "LG Washing Machine             600.000000\n",
       "Lightning Charging Cable        14.950000\n",
       "Macbook Pro Laptop            1700.000000\n",
       "ThinkPad Laptop                999.989990\n",
       "USB-C Charging Cable            11.950000\n",
       "Vareebadd Phone                400.000000\n",
       "Wired Headphones                11.990000\n",
       "iPhone                         700.000000\n",
       "Name: Price Each, dtype: float32"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#giá sễ ảnh hưởng như thế nào đến sản phẩm\n",
    "prices=df.groupby('Product').mean()['Price Each']\n",
    "prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "products_ls=[product for product, quant in all_products.items()]\n",
    "plt.bar(products_ls, all_products)\n",
    "plt.xticks(products_ls, rotation=90, size=8)\n",
    "plt.xlabel('Products')\n",
    "plt.ylabel('Quantity')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = products_ls # tên tất cả sản phẩm\n",
    "y1 = all_products # ds tổng số lượng sản phẩm bán ra của sản phẩm\n",
    "y2 = prices # ds giá 1 đơn vị của từng sản phẩm\n",
    "\n",
    "fig, ax1 = plt.subplots()\n",
    "\n",
    "ax2 = ax1.twinx()\n",
    "ax1.bar(x, y1, color='g')\n",
    "ax2.plot(x, y2, 'b-')\n",
    "\n",
    "ax1.set_xticklabels(products_ls, rotation=90, size=8) # xoay dọc tên sp và sửa\n",
    "ax1.set_xlabel('Products')\n",
    "ax1.set_ylabel('Quantity Ordered', color='g')\n",
    "ax2.set_ylabel('Price Each', color='b')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# nhìn vào biểu đồ thì thấy sự tương quan giữa giá sp và doanh thu sản phẩm"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
